<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Quote Review - <%= quoteData.projectName %></title>
  <style nonce="<%= locals.cspNonce %>">
    :root {
      --cream:#FFF9F0;
      --gold:#E3FF33;
      --pink:#F7D8EA;
      --ink:#111111;
      --text:#333333;
      --muted:#666666;
      --stroke:#E2DFDA;
      --bg:#FAF9F7;
    }

    *{box-sizing:border-box}
    html,body{margin:0;background:var(--bg);color:var(--text);font:16px/1.4 system-ui,-apple-system,Segoe UI,Inter,Roboto,Arial,sans-serif}
    .page{display:grid;place-items:start center;padding:32px}
    .card{width:min(920px,96vw);background:#fff;border-radius:16px;box-shadow:0 10px 30px rgba(0,0,0,.07);overflow:hidden;border:1px solid #eee}

    .card__header{background:var(--cream);padding:20px 24px 10px;border-bottom:1px solid var(--stroke)}
    .logo{height:40px;width:auto}
    .title{margin:10px 0 0;font-size:26px;font-weight:800;color:var(--ink)}
    .title .tag{background:transparent;border:none;border-radius:0;padding:0}

    .meta{padding:18px 24px;border-bottom:1px solid var(--stroke)}
    .meta .row{display:flex;gap:24px;align-items:center;margin:6px 0;flex-wrap:wrap}
    .meta span{color:var(--muted);margin-right:6px}
    .meta .token{background:var(--cream);border:1px solid var(--stroke);border-radius:6px;padding:2px 6px;font-style:normal;color:var(--ink)}
    .meta .stretch{flex:1 1 auto}

    .quote{padding:16px 24px}
    .quote h3{margin:0 0 10px;font-size:14px;font-weight:700;color:var(--ink)}
    .quote .quotebox{border:2px solid var(--stroke);border-radius:12px;overflow:hidden;background:#fff;padding:20px}
    .quote-details{margin:16px 0;line-height:1.6}
    .quote-item{padding:12px 0;border-bottom:1px solid #f0f0f0;display:grid;grid-template-columns:auto 1fr auto auto auto auto;gap:12px;align-items:center}
    .quote-item:last-child{border-bottom:2px solid var(--stroke);margin-bottom:12px}
    .quote-item .checkbox{width:18px;height:18px;accent-color:var(--gold)}
    .quote-item .description{font-weight:500}
    .quote-item .case-size{color:var(--muted);font-size:12px;margin-top:2px}
    .quote-item .price-info{display:flex;flex-direction:column;align-items:flex-end;min-width:100px}
    .quote-item .unit-price{color:var(--muted);font-size:14px}
    .quote-item .per-piece{color:var(--text);font-size:12px;font-weight:500}
    .quote-item .starts-at{color:var(--gold);font-size:12px;font-weight:600;background:var(--ink);padding:2px 6px;border-radius:4px;display:inline-block;margin-top:4px}
    .quote-item .qty-select{width:80px;height:32px;border:1px solid var(--stroke);border-radius:6px;padding:0 8px;text-align:center}
    .quote-item .qty-info{display:flex;align-items:center;gap:8px}
    .quote-item .qty-breakdown-btn{background:none;border:1px solid var(--stroke);color:var(--text);padding:0 8px;border-radius:4px;font-size:11px;cursor:pointer;white-space:nowrap;height:32px;display:flex;align-items:center;justify-content:center}
    .quote-item .qty-breakdown-btn:hover{background:var(--cream)}
    .quote-item .line-total{font-weight:600;min-width:80px;text-align:right}
    .quote-item.disabled{opacity:0.5}
    .quote-item.disabled .qty-select{background:#f5f5f5;color:#999}
    
    .instruction-box{margin-bottom:16px;padding:12px;background:#f8f9fa;border-left:4px solid var(--gold);border-radius:6px}
    .instruction-text{margin:0;font-size:14px;color:var(--text);line-height:1.5}
    
    .form-section{margin-bottom:24px}
    .comments-textarea{height:80px}
    
    /* Quantity Breakdown Modal */
    .qty-modal{display:none;position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,0.6);z-index:1000;backdrop-filter:blur(3px)}
    .qty-modal.show{display:flex;align-items:center;justify-content:center;padding:20px}
    .qty-modal-content{background:#fff;border-radius:16px;padding:32px;max-width:600px;width:95%;box-shadow:0 20px 40px rgba(0,0,0,0.15);border:1px solid var(--stroke)}
    .qty-modal-header{display:flex;justify-content:space-between;align-items:center;margin-bottom:24px;padding-bottom:16px;border-bottom:2px solid var(--stroke)}
    .qty-modal-title{font-size:20px;font-weight:800;color:var(--ink);letter-spacing:0.02em}
    .qty-modal-close{background:var(--cream);border:1px solid var(--stroke);border-radius:8px;width:32px;height:32px;display:flex;align-items:center;justify-content:center;font-size:18px;cursor:pointer;color:var(--text);transition:all 0.2s}
    .qty-modal-close:hover{background:var(--stroke);color:var(--ink)}
    .qty-modal-item-name{font-size:16px;font-weight:600;color:var(--ink);margin-bottom:20px;padding:12px;background:var(--cream);border-radius:8px;border-left:4px solid var(--gold)}
    .qty-breakdown-table{width:100%;border-collapse:collapse;margin:20px 0;border:1px solid var(--stroke);border-radius:8px;overflow:hidden}
    .qty-breakdown-table th{padding:12px 16px;text-align:left;background:var(--ink);color:#fff;font-weight:700;font-size:13px;text-transform:uppercase;letter-spacing:0.5px}
    .qty-breakdown-table td{padding:14px 16px;text-align:left;border-bottom:1px solid #f5f5f5;font-size:14px}
    .qty-breakdown-table tr:last-child td{border-bottom:none}
    .qty-breakdown-table tr:nth-child(even){background:#fafafa}
    .qty-breakdown-table tr:hover{background:var(--cream)}
    .qty-breakdown-table .qty-col{font-weight:600;color:var(--ink)}
    .qty-breakdown-table .price-col{font-weight:600;color:var(--text)}
    .qty-breakdown-table .total-col{font-weight:700;color:var(--ink)}
    .qty-breakdown-table .savings{color:#28a745;font-weight:700;background:#f0f9f0;padding:4px 8px;border-radius:4px;font-size:13px}
    .qty-breakdown-table .no-savings{color:var(--muted);font-style:italic}
    .qty-modal-footer{margin-top:24px;padding-top:20px;border-top:1px solid var(--stroke);font-size:13px;color:var(--muted);line-height:1.5}
    
    .quote-summary{margin-top:16px;padding:16px;background:var(--cream);border-radius:8px;border:1px solid var(--stroke)}
    .summary-line{display:flex;justify-content:space-between;margin:4px 0;padding:2px 0}
    .summary-line.total{font-weight:bold;font-size:18px;color:var(--ink);border-top:1px solid var(--stroke);margin-top:8px;padding-top:8px}
    .summary-line.deposit{color:var(--ink);font-weight:600}

    .form{padding:8px 24px 24px}
    .grid{display:grid;grid-template-columns:1fr 1fr;gap:24px}
    .label{display:block;font-size:14px;font-weight:700;color:var(--ink);margin:6px 0}
    .check{display:flex;align-items:center;gap:8px;margin:6px 0}
    .check input{width:16px;height:16px;accent-color:var(--gold)}

    .disclaimer{font-size:13px;color:var(--muted);margin:12px 0;max-width:420px}
    .quote-terms{margin-top:20px;padding-top:16px;border-top:1px solid var(--stroke);font-size:14px;color:var(--muted)}
    .loading{display:none;text-align:center;padding:12px}
    .result{display:none;margin-top:12px;padding:12px;border-radius:5px}

    textarea{
      width:100%;min-height:120px;border:2px solid var(--stroke);border-radius:10px;padding:10px;resize:vertical;font:inherit
    }
    textarea:focus, .mini input:focus { outline:none;border-color:var(--gold); }

    /* Signature row aligned to top */
    .sigrow{display:grid;grid-template-columns:1fr 220px 1fr;gap:24px;margin-top:18px;align-items:start}
    .sigrow .mini{display:flex;flex-direction:column;justify-content:flex-start;align-items:flex-start}
    .sig canvas{width:100%;height:150px;border:2px solid var(--stroke);border-radius:12px;background:#fff;display:block}
    .sig .link{margin-top:8px;background:none;border:0;color:#000;cursor:pointer;padding:0;font-weight:600}

    .mini input[type="date"], .mini input[type="text"]{
      width:100%;height:40px;border:2px solid var(--stroke);border-radius:10px;padding:0 10px;font:inherit
    }

    /* Compact buttons */
    .card .btn {
      background: var(--gold);
      color: #000;
      border: 0;
      border-radius: 8px;
      padding: 10px 20px;
      font-weight: 800;
      line-height: 1.2;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 6px;
      font-size: 14px;
      text-decoration: none;
      height: 40px;
      min-width: 140px;
      box-sizing: border-box;
    }
    .card .btn.secondary { background: var(--muted); }
    .card .btn:hover { filter: brightness(.95); }

    /* Actions row layout */
    .actions {
      padding: 24px;
    }
    .actions__row {
      display: flex;
      flex-wrap: wrap;
      gap: 8px;
      align-items: center;
      justify-content: center;
    }

    .card__footer{height:36px;background:var(--pink)}

    .loading.show { display: block; }
    .result.success { background-color: #d4edda; border: 1px solid #c3e6cb; color: #155724; }
    .result.error { background-color: #f8d7da; border: 1px solid #f5c6cb; color: #721c24; }

    @media (max-width: 768px) {
      .page { padding: 16px; }
      .grid { grid-template-columns: 1fr; }
      .sigrow { grid-template-columns: 1fr; gap: 16px; }
      .quote, .form { padding: 16px 20px; }
      .actions { padding: 16px 20px 24px; }
    }
  </style>
</head>
<body class="page">
  <div class="card">
    <header class="card__header">
      <img src="/assets/logo.png" alt="SHUREPRINT" class="logo">
      <h1 class="title">Quote Review â€“ <span class="tag"><%= quoteData.projectName %></span></h1>
    </header>

    <section class="meta">
      <div class="row">
        <span>Quote #:</span>
        <em class="token"><%= quoteData.quoteNumber %></em>
        <span>Version:</span>
        <em class="token"><%= quoteData.quoteVersion %></em>
        <span class="stretch">Date Sent:</span>
        <em class="token"><%= quoteData.dateSent %></em>
      </div>
      <div class="row">
        <span>Sales Rep:</span>
        <em class="token"><%= quoteData.salesRepFirst %> <%= quoteData.salesRepLast %></em>
        <span>Valid Until:</span>
        <em class="token"><%= quoteData.validUntil %></em>
        <span class="stretch">Client Company:</span>
        <em class="token"><%= quoteData.clientCompany %></em>
      </div>
    </section>

    <section class="quote">
      <h3>QUOTE DETAILS</h3>
      <div class="instruction-box">
        <p class="instruction-text">
          <strong>Instructions:</strong> Please review the items below and select which items you'd like to include in your order. 
          Use the checkboxes to select items and adjust quantities using the dropdown menus. 
          The pricing will update automatically as you make your selections.
        </p>
      </div>
      <div class="quotebox">
        <div class="quote-details">
          <% if (quoteData && quoteData.quoteItems) { %>
            <% quoteData.quoteItems.forEach(function(item, index) { %>
              <div class="quote-item" data-item="<%= item.key %>" data-unit-price="<%= item.unitPrice %>">
                <input type="checkbox" class="checkbox" <%= item.selected ? 'checked' : '' %>>
                <div class="description">
                  <div><%= item.name %></div>
                  <div class="unit-price"><%= item.description %></div>
                  <% if (item.caseSize) { %>
                    <div class="case-size">Case Size: <%= item.caseSize %></div>
                  <% } else if (item.key === 'business-cards') { %>
                    <div class="case-size">Case Size: 1,000 cards per unit</div>
                  <% } else if (item.key === 'letterhead') { %>
                    <div class="case-size">Case Size: 500 sheets per unit</div>
                  <% } else if (item.key === 'envelopes') { %>
                    <div class="case-size">Case Size: 500 envelopes per unit</div>
                  <% } %>
                  <% if (item.pricingTiers && item.pricingTiers.length > 0) { %>
                    <div class="starts-at">Starts at $<%= item.pricingTiers[item.pricingTiers.length - 1].unitPrice.toFixed(2) %></div>
                  <% } %>
                </div>
                <div class="price-info">
                  <div class="unit-price">$<%= item.unitPrice.toFixed(2) %></div>
                  <div class="per-piece">$<%= (item.unitPrice / (item.key === 'business-cards' ? 1000 : item.key === 'letterhead' || item.key === 'envelopes' ? 500 : 1)).toFixed(3) %>/pc</div>
                </div>
                <div class="qty-info">
                  <select class="qty-select">
                    <% item.quantityOptions.forEach(function(qty) { %>
                      <option value="<%= qty %>" <%= qty === item.defaultQuantity ? 'selected' : '' %>>
                        <%= qty %><%
                        if (item.pricingTiers) {
                          const tier = item.pricingTiers.find(t => t.qty === qty);
                          if (tier) { %> - <%= tier.description %><% }
                        } %>
                      </option>
                    <% }); %>
                  </select>
                  <% if (item.quantityOptions.length > 1) { %>
                    <button type="button" class="qty-breakdown-btn" data-item-key="<%= item.key %>" data-item-name="<%= item.name %>" data-unit-price="<%= item.unitPrice %>" data-quantities="[<%= item.quantityOptions.join(',') %>]">
                      Qty Breaks
                    </button>
                  <% } %>
                </div>
                <div class="line-total">$<%= item.selected ? (item.unitPrice * item.defaultQuantity).toFixed(2) : '0.00' %></div>
              </div>
            <% }); %>
          <% } else { %>
            <!-- Fallback to hardcoded items if no quoteItems data -->
            <div class="quote-item" data-item="setup" data-unit-price="150">
              <input type="checkbox" class="checkbox" checked>
              <div class="description">
                <div>Project Setup & Design</div>
                <div class="unit-price">One-time setup fee</div>
              </div>
              <div class="price-info">
                <div class="unit-price">$150.00</div>
                <div class="per-piece">$150.000/pc</div>
              </div>
              <div class="qty-info">
                <select class="qty-select">
                  <option value="1" selected>1</option>
                </select>
              </div>
              <div class="line-total">$150.00</div>
            </div>
            
            <div class="quote-item" data-item="business-cards" data-unit-price="89">
              <input type="checkbox" class="checkbox" checked>
              <div class="description">
                <div>Business Cards - Premium</div>
                <div class="unit-price">Case of 1,000 cards per unit</div>
                <div class="starts-at">Starts at $72.00</div>
              </div>
              <div class="price-info">
                <div class="unit-price">$89.00</div>
                <div class="per-piece">$0.089/pc</div>
              </div>
              <div class="qty-info">
                <select class="qty-select">
                  <option value="1" selected>1</option>
                  <option value="2">2</option>
                  <option value="3">3</option>
                  <option value="5">5</option>
                  <option value="10">10</option>
                </select>
                <button type="button" class="qty-breakdown-btn" data-item-key="business-cards" data-item-name="Business Cards - Premium" data-unit-price="89" data-quantities="[1,2,3,5,10]">
                  Qty Breaks
                </button>
              </div>
              <div class="line-total">$89.00</div>
            </div>
            
            <div class="quote-item" data-item="letterhead" data-unit-price="45">
              <input type="checkbox" class="checkbox">
              <div class="description">
                <div>Letterhead - Premium</div>
                <div class="unit-price">Case of 500 sheets per unit</div>
                <div class="starts-at">Starts at $34.00</div>
              </div>
              <div class="price-info">
                <div class="unit-price">$45.00</div>
                <div class="per-piece">$0.090/pc</div>
              </div>
              <div class="qty-info">
                <select class="qty-select">
                  <option value="1" selected>1</option>
                  <option value="2">2</option>
                  <option value="5">5</option>
                  <option value="10">10</option>
                </select>
                <button type="button" class="qty-breakdown-btn" data-item-key="letterhead" data-item-name="Letterhead - Premium" data-unit-price="45" data-quantities="[1,2,5,10]">
                  Qty Breaks
                </button>
              </div>
              <div class="line-total">$0.00</div>
            </div>
            
            <div class="quote-item" data-item="rush" data-unit-price="25">
              <input type="checkbox" class="checkbox">
              <div class="description">
                <div>Rush Processing</div>
                <div class="unit-price">2-day turnaround</div>
              </div>
              <div class="price-info">
                <div class="unit-price">$25.00</div>
                <div class="per-piece">$25.000/pc</div>
              </div>
              <div class="qty-info">
                <select class="qty-select">
                  <option value="1" selected>1</option>
                </select>
              </div>
              <div class="line-total">$0.00</div>
            </div>
          <% } %>
        </div>
        
        <div class="quote-summary">
          <div class="summary-line">
            <span>Subtotal:</span>
            <span id="subtotal">$239.00</span>
          </div>
          <div class="summary-line">
            <span>Tax (8.5%):</span>
            <span id="tax">$20.32</span>
          </div>
          <div class="summary-line total">
            <span>Total:</span>
            <span id="total">$259.32</span>
          </div>
          <div class="summary-line deposit">
            <span>Required Deposit (50%):</span>
            <span id="deposit">$129.66</span>
          </div>
        </div>
        
        <div class="quote-terms">
          <p><strong>Terms:</strong> 50% deposit required to begin work. Final payment due upon completion.</p>
          <p><strong>Timeline:</strong> 2-3 business days from approval and deposit receipt.</p>
        </div>
      </div>
    </section>

    <section class="form">
      <form id="quoteForm">
        <div class="form-section">
          <label class="label" for="comments">Special Instructions (Optional)</label>
          <textarea name="comments" id="comments" placeholder="Any special instructions for your order..." class="comments-textarea"></textarea>
        </div>

        <div class="sigrow">
          <div class="sig">
            <label class="label">Digital Signature *</label>
            <canvas id="signatureCanvas" width="400" height="150"></canvas>
            <button type="button" id="clearSignature" class="link">Clear Signature</button>
          </div>
          <div class="mini">
            <label class="label" for="customerName">Name *</label>
            <input type="text" name="customerName" id="customerName" required placeholder="Full Name">
          </div>
          <div class="mini">
            <label class="label" for="date">Date</label>
            <input type="date" id="date" name="date" value="<%= new Date().toISOString().split('T')[0] %>">
          </div>
        </div>
      </form>
    </section>

    <section class="actions">
      <div class="actions__row">
        <button type="submit" form="quoteForm" class="btn" id="submitQuoteBtn">ACCEPT QUOTE & PROCEED TO PAYMENT</button>
        <a href="<%= pdfUrl %>" target="_blank" class="btn secondary">Download PDF</a>
      </div>
      <div class="loading">
        Processing your approval...
      </div>
      <div id="result" class="result"></div>
    </section>

    <footer class="card__footer"></footer>
  </div>

  <!-- Quantity Breakdown Modal -->
  <div id="qtyModal" class="qty-modal">
    <div class="qty-modal-content">
      <div class="qty-modal-header">
        <h3 class="qty-modal-title">Quantity Pricing Breakdown</h3>
        <button class="qty-modal-close" id="qtyModalClose">&times;</button>
      </div>
      <div id="qtyModalBody">
        <!-- Content will be populated by JavaScript -->
      </div>
    </div>
  </div>

  <script nonce="<%= locals.cspNonce %>">
    // Quote Item Pricing Data - will be populated from server data
    const quoteItems = {};
    
    // Initialize quote items from server data or fallback
    console.log('Debug: quoteData exists:', typeof quoteData !== 'undefined');
    console.log('Debug: quoteData.quoteItems exists:', typeof quoteData !== 'undefined' && quoteData.quoteItems);
    <% if (quoteData && quoteData.quoteItems) { %>
      <% quoteData.quoteItems.forEach(function(item) { %>
        quoteItems['<%= item.key %>'] = {
          unitPrice: <%= item.unitPrice %>,
          required: <%= item.required || false %>,
          pricingTiers: <% if (item.pricingTiers && item.pricingTiers.length > 0) { %>[
            <% item.pricingTiers.forEach(function(tier, index) { %>
              {qty: <%= tier.qty %>, unitPrice: <%= tier.unitPrice %>, description: "<%= tier.description.replace(/"/g, '\\"') %>"}<%= index < item.pricingTiers.length - 1 ? ',' : '' %>
            <% }); %>
          ]<% } else { %>[]<% } %>
        };
      <% }); %>
    <% } else { %>
      // Fallback pricing data with volume discounts
      quoteItems['setup'] = { unitPrice: 150.00, required: true, pricingTiers: [] };
      quoteItems['business-cards'] = { 
        unitPrice: 89.00, 
        required: false,
        pricingTiers: [
          { qty: 1, unitPrice: 89.00, description: '1,000 cards' },
          { qty: 2, unitPrice: 85.00, description: '2,000 cards' },
          { qty: 3, unitPrice: 82.00, description: '3,000 cards' },
          { qty: 5, unitPrice: 78.00, description: '5,000 cards' },
          { qty: 10, unitPrice: 72.00, description: '10,000 cards' }
        ]
      };
      quoteItems['letterhead'] = { 
        unitPrice: 45.00, 
        required: false,
        pricingTiers: [
          { qty: 1, unitPrice: 45.00, description: '500 sheets' },
          { qty: 2, unitPrice: 42.00, description: '1,000 sheets' },
          { qty: 5, unitPrice: 38.00, description: '2,500 sheets' },
          { qty: 10, unitPrice: 34.00, description: '5,000 sheets' }
        ]
      };
      quoteItems['rush'] = { unitPrice: 25.00, required: false, pricingTiers: [] };
    <% } %>

    const TAX_RATE = 0.085; // 8.5%
    const DEPOSIT_RATE = 0.50; // 50%

    // Get the unit price for a specific quantity (supports tiered pricing)
    function getUnitPrice(itemKey, quantity) {
      const item = quoteItems[itemKey];
      console.log('getUnitPrice called with:', { itemKey, quantity, item });
      
      if (!item) {
        console.log('Item not found for key:', itemKey);
        return 0;
      }
      
      // Check if item has tiered pricing
      if (item.pricingTiers && item.pricingTiers.length > 0) {
        const tier = item.pricingTiers.find(t => t.qty === quantity);
        console.log('Looking for tier with qty:', quantity, 'found:', tier);
        return tier ? tier.unitPrice : item.unitPrice;
      }
      
      return item.unitPrice;
    }

    // Calculate and update pricing
    function updatePricing() {
      let subtotal = 0;
      
      document.querySelectorAll('.quote-item').forEach(item => {
        const itemKey = item.getAttribute('data-item');
        const checkbox = item.querySelector('.checkbox');
        const qtySelect = item.querySelector('.qty-select');
        const lineTotalEl = item.querySelector('.line-total');
        
        if (checkbox.checked) {
          const qty = parseInt(qtySelect.value) || 0;
          const unitPrice = getUnitPrice(itemKey, qty);
          const lineTotal = unitPrice * qty;
          subtotal += lineTotal;
          lineTotalEl.textContent = '$' + lineTotal.toFixed(2);
          item.classList.remove('disabled');
          qtySelect.disabled = false;
        } else {
          lineTotalEl.textContent = '$0.00';
          item.classList.add('disabled');
          qtySelect.disabled = true;
        }
      });
      
      const tax = subtotal * TAX_RATE;
      const total = subtotal + tax;
      const deposit = total * DEPOSIT_RATE;
      
      document.getElementById('subtotal').textContent = '$' + subtotal.toFixed(2);
      document.getElementById('tax').textContent = '$' + tax.toFixed(2);
      document.getElementById('total').textContent = '$' + total.toFixed(2);
      document.getElementById('deposit').textContent = '$' + deposit.toFixed(2);
      
      return { subtotal, tax, total, deposit };
    }

    // Update individual item price display when quantity changes
    function updateItemPriceDisplay(itemElement, itemKey) {
      const qtySelect = itemElement.querySelector('.qty-select');
      const priceInfoEl = itemElement.querySelector('.price-info .unit-price');
      const perPieceEl = itemElement.querySelector('.price-info .per-piece');
      
      const qty = parseInt(qtySelect.value) || 1;
      const unitPrice = getUnitPrice(itemKey, qty);
      
      // Update unit price display
      priceInfoEl.textContent = '$' + unitPrice.toFixed(2);
      
      // Update per-piece pricing based on item type
      let baseQuantity = 1;
      if (itemKey === 'business-cards') baseQuantity = 1000;
      else if (itemKey === 'letterhead' || itemKey === 'envelopes') baseQuantity = 500;
      
      const perPiece = unitPrice / baseQuantity;
      perPieceEl.textContent = '$' + perPiece.toFixed(3) + '/pc';
    }

    // Initialize pricing calculations
    document.addEventListener('DOMContentLoaded', function() {
      // Add event listeners to all checkboxes and quantity inputs
      document.querySelectorAll('.quote-item').forEach(item => {
        const itemKey = item.getAttribute('data-item');
        const checkbox = item.querySelector('.checkbox');
        const qtySelect = item.querySelector('.qty-select');
        
        // Prevent unchecking required items
        if (quoteItems[itemKey]?.required) {
          checkbox.addEventListener('click', function(e) {
            if (!this.checked) {
              e.preventDefault();
              return false;
            }
          });
        }
        
        checkbox.addEventListener('change', updatePricing);
        qtySelect.addEventListener('change', function() {
          updatePricing();
          updateItemPriceDisplay(item, itemKey);
        });
        
        // Initialize the item price display
        updateItemPriceDisplay(item, itemKey);
      });
      
      // Initial calculation
      updatePricing();
      
      // Add event listeners for savings buttons
      document.querySelectorAll('.qty-breakdown-btn').forEach(button => {
        button.addEventListener('click', function() {
          console.log('Qty breakdown button clicked');
          const itemKey = this.getAttribute('data-item-key');
          const itemName = this.getAttribute('data-item-name');
          const unitPrice = parseFloat(this.getAttribute('data-unit-price'));
          const quantities = JSON.parse(this.getAttribute('data-quantities'));
          console.log('Button data:', { itemKey, itemName, unitPrice, quantities });
          console.log('Available quoteItems:', Object.keys(quoteItems));
          showQuantityBreakdown(itemKey, itemName, unitPrice, quantities);
        });
      });
      
      // Add event listener for modal close button
      document.getElementById('qtyModalClose').addEventListener('click', closeQuantityBreakdown);
    });

    // Quantity Breakdown Modal Functions
    function showQuantityBreakdown(itemKey, itemName, unitPrice, quantities) {
      console.log('showQuantityBreakdown called with:', { itemKey, itemName, unitPrice, quantities });
      const modal = document.getElementById('qtyModal');
      const modalBody = document.getElementById('qtyModalBody');
      console.log('Modal elements found:', { modal: !!modal, modalBody: !!modalBody });
      
      // Calculate per-piece pricing based on item type
      let baseQuantity = 1;
      if (itemKey === 'business-cards') baseQuantity = 1000;
      else if (itemKey === 'letterhead' || itemKey === 'envelopes') baseQuantity = 500;
      
      let tableHtml = `
        <div class="qty-modal-item-name">${itemName}</div>
        <table class="qty-breakdown-table">
          <thead>
            <tr>
              <th>Quantity</th>
              <th>Unit Price</th>
              <th>Total Cost</th>
              <th>Per Piece</th>
              <th>You Save</th>
            </tr>
          </thead>
          <tbody>
      `;
      
      // Get baseline pricing for comparison (quantity 1)
      const baseUnitPrice = getUnitPrice(itemKey, quantities[0]);
      const baseTotal = baseUnitPrice;
      
      quantities.forEach((qty, index) => {
        const currentUnitPrice = getUnitPrice(itemKey, qty);
        const total = currentUnitPrice * qty;
        const perPiece = currentUnitPrice / baseQuantity;
        
        // Calculate savings compared to buying the same total quantity at qty 1 pricing
        const wouldCostAtQty1 = baseUnitPrice * qty;
        const savings = wouldCostAtQty1 - total;
        const savingsPercent = wouldCostAtQty1 > 0 ? ((savings / wouldCostAtQty1) * 100) : 0;
        
        // Get tier description if available
        const item = quoteItems[itemKey];
        let description = '';
        if (item && item.pricingTiers) {
          const tier = item.pricingTiers.find(t => t.qty === qty);
          description = tier ? ` (${tier.description})` : '';
        }
        
        tableHtml += `
          <tr>
            <td class="qty-col">${qty}${description}</td>
            <td class="price-col">$${currentUnitPrice.toFixed(2)}</td>
            <td class="total-col">$${total.toFixed(2)}</td>
            <td>$${perPiece.toFixed(3)}</td>
            <td class="${savings > 0 ? 'savings' : 'no-savings'}">
              ${savings > 0 ? `$${savings.toFixed(2)} (${savingsPercent.toFixed(1)}%)` : 'Base Price'}
            </td>
          </tr>
        `;
      });
      
      tableHtml += `
          </tbody>
        </table>
        <div class="qty-modal-footer">
          <strong>ðŸ’¡ Volume Pricing Benefits:</strong><br>
          â€¢ Unit prices decrease as quantity increases<br>
          â€¢ Significant savings on larger orders<br>
          â€¢ Best value at highest quantities
        </div>
      `;
      
      modalBody.innerHTML = tableHtml;
      modal.classList.add('show');
    }

    function closeQuantityBreakdown() {
      const modal = document.getElementById('qtyModal');
      modal.classList.remove('show');
    }

    // Close modal when clicking outside
    document.getElementById('qtyModal').addEventListener('click', function(e) {
      if (e.target === this) {
        closeQuantityBreakdown();
      }
    });

    // Form submission
    document.getElementById('quoteForm').addEventListener('submit', async function(e) {
      e.preventDefault();
      const formData = new FormData(this);
      const data = {};
      for (let [key, value] of formData.entries()) data[key] = value;

      if (!data.customerName) {
        showResult('Please provide your name to continue.', 'error');
        return;
      }
      if (!hasSignature) {
        showResult('Please provide your digital signature.', 'error');
        return;
      }

      // Collect selected items and quantities
      const selectedItems = [];
      document.querySelectorAll('.quote-item').forEach(item => {
        const itemKey = item.getAttribute('data-item');
        const checkbox = item.querySelector('.checkbox');
        const qtySelect = item.querySelector('.qty-select');
        
        if (checkbox.checked) {
          const qty = parseInt(qtySelect.value) || 0;
          const unitPrice = getUnitPrice(itemKey, qty);
          selectedItems.push({
            item: itemKey,
            quantity: qty,
            unitPrice: unitPrice,
            lineTotal: unitPrice * qty
          });
        }
      });

      if (selectedItems.length === 0) {
        showResult('Please select at least one item to approve.', 'error');
        return;
      }

      // Calculate final pricing
      const pricing = updatePricing();
      
      data.signature = canvas.toDataURL('image/png');
      data.selectedItems = selectedItems;
      data.pricing = pricing;
      data.accepted = true; // Always true since we're only doing approvals

      // Show payment delegation modal before submitting
      const delegatePayment = confirm(
        "PAYMENT OPTIONS\n\n" +
        "Do you need to delegate payment to someone else (like accounting or finance)?\n\n" +
        "YES - Delegate payment (enter email address)\n" +
        "NO - I'll pay myself\n\n" +
        "Click OK to delegate payment\n" +
        "Click Cancel to pay yourself"
      );
      
      if (delegatePayment) {
        const delegateEmail = prompt(
          "PAYMENT DELEGATION\n\n" +
          "Enter the email address of the person who should receive the payment request:\n\n" +
          "(They will receive payment instructions and reminders)"
        );
        
        if (delegateEmail && delegateEmail.includes('@')) {
          data.delegatePayment = true;
          data.paymentEmail = delegateEmail;
        } else if (delegateEmail !== null) {
          showResult('Please enter a valid email address.', 'error');
          return;
        } else {
          return; // User cancelled
        }
      } else {
        data.delegatePayment = false;
      }

      const submitBtn = document.getElementById('submitQuoteBtn');
      document.querySelector('.loading').style.display = 'block';
      submitBtn.disabled = true;

      try {
        const response = await fetch('<%= submitUrl %>', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(data)
        });
        const result = await response.json();
        if (response.ok && result.success) {
          if (data.delegatePayment) {
            showResult(
              `QUOTE ACCEPTED & PAYMENT DELEGATED\n\n` +
              `Payment request sent to: ${data.paymentEmail}\n` +
              `You will be CC'd on all payment communications\n` +
              `Automated reminders will be sent until payment is complete\n\n` +
              `REMINDER SCHEDULE:\n` +
              `Days 1-2: Daily reminders\n` +
              `Days 3-6: Urgent reminders twice daily\n` +
              `Day 7+: Sales rep escalation for personal follow-up\n\n` +
              `This ensures payment is completed without damaging relationships.\n\n` +
              `Your project will begin once payment is received.`, 'success');
          } else {
            showResult(
              `QUOTE ACCEPTED\n\n` +
              `Redirecting you to secure payment processing...\n\n` +
              `Amount Due: $${pricing.deposit.toFixed(2)} (50% deposit)\n` +
              `Secure Stripe payment processing\n` +
              `You'll receive payment confirmation\n\n` +
              (result.nextSteps || ''), 'success');
            
            // Redirect to payment after a short delay
            setTimeout(() => {
              window.location.href = `/payment-checkout.html?quoteId=<%= quoteId %>&type=deposit`;
            }, 3000);
          }
          this.style.display = 'none';
        } else {
          showResult(result.error || 'An error occurred. Please try again.', 'error');
          submitBtn.disabled = false;
        }
      } catch (error) {
        showResult('Network error. Please check your connection and try again.', 'error');
        submitBtn.disabled = false;
      } finally {
        document.querySelector('.loading').style.display = 'none';
      }
    });

    function showResult(message, type) {
      const resultDiv = document.getElementById('result');
      resultDiv.textContent = message;
      resultDiv.className = `result ${type}`;
      resultDiv.style.display = 'block';
      resultDiv.scrollIntoView({ behavior: 'smooth' });
    }

    // Signature Canvas Setup
    const canvas = document.getElementById('signatureCanvas');
    const ctx = canvas.getContext('2d', { willReadFrequently: true });
    let isDrawing = false;
    let hasSignature = false;

    function sizeCanvasToDisplay() {
      const rect = canvas.getBoundingClientRect();
      const dpr = window.devicePixelRatio || 1;
      canvas.width = Math.max(1, Math.floor(rect.width * dpr));
      canvas.height = Math.max(1, Math.floor(rect.height * dpr));
      ctx.setTransform(1, 0, 0, 1, 0, 0);
      ctx.scale(dpr, dpr);
      ctx.lineWidth = 2;
      ctx.lineCap = 'round';
      ctx.lineJoin = 'round';
      ctx.strokeStyle = '#000';
    }
    function initCanvas() { sizeCanvasToDisplay(); }
    initCanvas();

    let resizeRAF;
    window.addEventListener('resize', () => {
      cancelAnimationFrame(resizeRAF);
      resizeRAF = requestAnimationFrame(() => {
        initCanvas();
        hasSignature = false;
      });
    });

    function getEventPos(e) {
      const rect = canvas.getBoundingClientRect();
      let clientX, clientY;
      if (e.touches && e.touches[0]) {
        clientX = e.touches[0].clientX;
        clientY = e.touches[0].clientY;
      } else {
        clientX = e.clientX;
        clientY = e.clientY;
      }
      return { x: clientX - rect.left, y: clientY - rect.top };
    }

    canvas.addEventListener('mousedown', startDrawing);
    canvas.addEventListener('mousemove', draw);
    canvas.addEventListener('mouseup', stopDrawing);
    canvas.addEventListener('mouseout', stopDrawing);
    canvas.addEventListener('touchstart', handleTouch, { passive: false });
    canvas.addEventListener('touchmove', handleTouch, { passive: false });
    canvas.addEventListener('touchend', handleTouch, { passive: false });

    function startDrawing(e) {
      e.preventDefault();
      isDrawing = true;
      const pos = getEventPos(e);
      ctx.beginPath();
      ctx.moveTo(pos.x, pos.y);
    }
    function draw(e) {
      e.preventDefault();
      if (!isDrawing) return;
      const pos = getEventPos(e);
      ctx.lineTo(pos.x, pos.y);
      ctx.stroke();
      hasSignature = true;
    }
    function stopDrawing(e) {
      e.preventDefault();
      if (isDrawing) {
        isDrawing = false;
        ctx.beginPath();
      }
    }
    function handleTouch(e) {
      e.preventDefault();
      if (e.type === 'touchstart') startDrawing(e);
      else if (e.type === 'touchmove') draw(e);
      else if (e.type === 'touchend') stopDrawing(e);
    }

    document.getElementById('clearSignature').addEventListener('click', function() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      hasSignature = false;
    });


  </script>
</body>
</html>